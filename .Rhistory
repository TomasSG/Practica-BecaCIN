ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
coord_cartesian(ylim = c(0, 1)) +
scale_fill_manual(values = c("#68FF33","#FF3333"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
coord_cartesian(ylim = c(0, 1)) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(es_primera, prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
facet_grid(. ~ es_primera) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
library(readxl)
library(ggplot2)
library(ggthemes)
library(stringr)
library(dplyr)
library(lubridate)
library(scales)
library(extrafont)
tema_viejo <- theme_get()
theme_set(theme_gdocs() + theme(text = element_text(family = "Rockwell"),
plot.title = element_text(hjust = .5,size = 25, color = "black"),
axis.title = element_text(size = 15, color = "black")))
datos <- read.csv("./data/train.csv")
# Cambiamos los nombres de las variables a minÃºsculas
names(datos) <- c("passenger_id", "survived", "p_class", "name",
"sex", "age", "sib_sp", "parch", "ticket",
"fare", "cabin", "embarked")
# Cambiamos algunas variables a factores
datos$p_class <- as.factor(datos$p_class)
# Creamos un indicador de primera clase
datos <- datos %>% mutate(es_primera = ifelse(p_class == 1, 1, 0))
datos$es_primera <- as.factor(datos$es_primera)
g1 <- ggplot(datos, aes(p_class, fare, color = p_class)) +
geom_boxplot() +
geom_jitter(width = .1)
g1 + coord_cartesian(ylim = c(0, 100))
ggplot(datos, aes(es_primera, fare, color = es_primera)) +
geom_boxplot() +
geom_jitter(width = .1)
ggplot(datos, aes(es_primera, fare, color = es_primera)) +
geom_boxplot() +
geom_jitter(width = .1) +
coord_cartesian(ylim = c(0, 300))
ggplot(datos, aes(es_primera, fare, color = es_primera)) +
geom_point()
g1 <- ggplot(datos, aes(es_primera, fare, color = es_primera)) +
geom_boxplot(show.legend = FALSE) +
ylab("Tarifa") +
xlab("") +
ggtitle("") +
scale_y_continuous(labels = label_number(prefix = "$"))
g2 <- ggplot(datos, aes(fare, es_primera, color = es_primera)) +
geom_point(alpha = .4, show.legend = FALSE) +
xlab("Tarifa") +
ylab("") +
ggtitle("") +
scale_x_continuous(labels = label_number(prefix = "$"))
annotate_figure(ggarrange(g1, g2, nrow = 1, ncol = 2),
top = text_grob("Tarifa contra indicador de primera clase (sin zoom)",
size = TAMANIO_LETRA_TITULO_PRINCIPAL, color = "black", family = FAMILIA_LETRA))
library(readxl)
library(ggplot2)
library(ggthemes)
library(stringr)
library(dplyr)
library(lubridate)
library(scales)
library(extrafont)
annotate_figure(ggarrange(g1, g2, nrow = 1, ncol = 2),
top = text_grob("Tarifa contra indicador de primera clase (sin zoom)",
size = TAMANIO_LETRA_TITULO_PRINCIPAL, color = "black", family = FAMILIA_LETRA))
library(ggpubr)
annotate_figure(ggarrange(g1, g2, nrow = 1, ncol = 2),
top = text_grob("Tarifa contra indicador de primera clase (sin zoom)",
size = TAMANIO_LETRA_TITULO_PRINCIPAL, color = "black", family = FAMILIA_LETRA))
g1 <- g1 + coord_cartesian(ylim = c(0, 200))
g2 <- g2 + coord_cartesian(xlim = c(0, 200))
annotate_figure(ggarrange(g1, g2, nrow = 1, ncol = 2),
top = text_grob("Tarifa contra indicador de primera clase (con zoom)",
size = TAMANIO_LETRA_TITULO_PRINCIPAL,
color = "black", family = FAMILIA_LETRA))
modelo <- glm(es_primera ~ fare, data =  datos, family = "binomial")
summary(modelo)
# Primero generamos nuevos puntos
nuevos_puntos <- seq(min(datos$fare), max(datos$fare), .5)
# Ahora, predecimos las probabilidades
predicciones <- predict(modelo, data.frame(fare = nuevos_puntos), type = "response")
# Graficamos las probabilidades
df_aux <- data.frame(predicciones = predicciones, fare = nuevos_puntos)
ggplot(df_aux, aes(fare, predicciones)) +
geom_line(color = "darkblue") +
xlab("Tarifa") +
ylab("P(Y = 1|X)") +
ggtitle("Predicciones realizadas") +
scale_x_continuous(label = label_number(prefix = "$")) +
coord_cartesian(xlim = c(0, 150))
anova(modelo, test = "Chisq")
# Primero realizamos las predicciones con los datos
predicciones <- ifelse(modelo$fitted.values > 0.5, 1, 0)
# Armamos un df para ver si es capaz de clasificar correctamente
df <- data.frame(fare = modelo$model$fare, es_primera = modelo$model$es_primera,
predicciones = predicciones)
df <- df %>% mutate(prediccion_correcta = ifelse(predicciones == es_primera,
"Correcto",
"No correcto"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(es_primera, prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
facet_grid(. ~ es_primera) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
coord_cartesian(ylim = c(0, 1)) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(es_primera, prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
facet_grid(. ~ es_primera) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
coord_cartesian(ylim = c(0, 1)) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
View(datos)
g1 <- ggplot(datos, aes(es_primera, fare, color = es_primera)) +
geom_boxplot(show.legend = FALSE) +
ylab("Tarifa") +
xlab("") +
ggtitle("") +
scale_y_continuous(labels = label_number(prefix = "$"))
g2 <- ggplot(datos, aes(fare, es_primera, color = es_primera)) +
geom_point(alpha = .4, show.legend = FALSE) +
xlab("Tarifa") +
ylab("") +
ggtitle("") +
scale_x_continuous(labels = label_number(prefix = "$"))
annotate_figure(ggarrange(g1, g2, nrow = 1, ncol = 2),
top = text_grob("Tarifa contra indicador de primera clase (sin zoom)",
size = TAMANIO_LETRA_TITULO_PRINCIPAL, color = "black", family = FAMILIA_LETRA))
g1 <- g1 + coord_cartesian(ylim = c(0, 200))
g2 <- g2 + coord_cartesian(xlim = c(0, 200))
annotate_figure(ggarrange(g1, g2, nrow = 1, ncol = 2),
top = text_grob("Tarifa contra indicador de primera clase (con zoom)",
size = TAMANIO_LETRA_TITULO_PRINCIPAL,
color = "black", family = FAMILIA_LETRA))
ggplot(datos, aes(survived, age)) +
geom_point()
modelo <- glm(es_primera ~ fare, data =  datos, family = "binomial")
summary(modelo)
# Primero generamos nuevos puntos
nuevos_puntos <- seq(min(datos$fare), max(datos$fare), .5)
# Ahora, predecimos las probabilidades
predicciones <- predict(modelo, data.frame(fare = nuevos_puntos), type = "response")
# Graficamos las probabilidades
df_aux <- data.frame(predicciones = predicciones, fare = nuevos_puntos)
ggplot(df_aux, aes(fare, predicciones)) +
geom_line(color = "darkblue") +
xlab("Tarifa") +
ylab("P(Y = 1|X)") +
ggtitle("Predicciones realizadas") +
scale_x_continuous(label = label_number(prefix = "$")) +
coord_cartesian(xlim = c(0, 150))
nrow(datos)
anova(modelo, test = "Chisq")
# Primero realizamos las predicciones con los datos
predicciones <- ifelse(modelo$fitted.values > 0.5, 1, 0)
# Armamos un df para ver si es capaz de clasificar correctamente
df <- data.frame(fare = modelo$model$fare, es_primera = modelo$model$es_primera,
predicciones = predicciones)
df <- df %>% mutate(prediccion_correcta = ifelse(predicciones == es_primera,
"Correcto",
"No correcto"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(es_primera, prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
facet_grid(. ~ es_primera) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
coord_cartesian(ylim = c(0, 1)) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
rm(list = ls())
library(readxl, warn.conflicts = FALSE)
library(ggplot2)
library(ggthemes)
library(extrafont)
library(scales)
library(lubridate)
font_import()
View(datos)
datos <- read_excel("../../../Gaby-presion-JULIO 2020.xlsx")
datos <- read_excel("./data//Gaby-presion-JULIO 2020.xlsx")
datos <- read_excel("./data/Gaby-presion-JULIO 2020.xlsx")
View(datos)
names(datos) <- gsub("Ã¡", "a", tolower(names(datos)))
names(datos)[6] <- "pulsaciones"
datos$momento <- factor(datos$momento, levels = c("M", "T", "N"), labels = c("MaÃ±ana", "Tarde", "Noche"))
is.POSIXt(datos$fecha)
colores <- c("Pulsaciones" = "firebrick",
"PresiÃ³n arterial mÃ¡xima" = "darkblue",
"PresiÃ³n arterial mÃ­nima" = "darkorange")
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "PresiÃ³n arterial mÃ¡xima"), size = 1.5) +
geom_line(aes(y = min, color = "PresiÃ³n arterial mÃ­nima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presiÃ³n y pulsaciones", "Â¿TendrÃ¡ algÃºn problema mamÃ¡?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
names(datos) <- gsub("Ã­", "i", tolower(names(datos)))
names(datos)[6] <- "pulsaciones"
datos$momento <- factor(datos$momento, levels = c("M", "T", "N"), labels = c("MaÃ±ana", "Tarde", "Noche"))
is.POSIXt(datos$fecha)
colores <- c("Pulsaciones" = "firebrick",
"PresiÃ³n arterial mÃ¡xima" = "darkblue",
"PresiÃ³n arterial mÃ­nima" = "darkorange")
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "PresiÃ³n arterial mÃ¡xima"), size = 1.5) +
geom_line(aes(y = min, color = "PresiÃ³n arterial mÃ­nima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presiÃ³n y pulsaciones", "Â¿TendrÃ¡ algÃºn problema mamÃ¡?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
datos <- read_excel("./data/Gaby-presion-JULIO 2020.xlsx")
View(datos)
datos$momento <- factor(datos$momento, levels = c("M", "T", "N"), labels = c("MaÃ±ana", "Tarde", "Noche"))
datos <- read_excel("./data/Gaby-presion-JULIO 2020.xlsx")
View(datos)
names(datos) <- gsub("Ã¡", "a", tolower(names(datos)))
names(datos) <- gsub("Ã­", "i", tolower(names(datos)))
names(datos)[6] <- "pulsaciones"
datos$momento <- factor(datos$momento, levels = c("M", "T", "N"), labels = c("MaÃ±ana", "Tarde", "Noche"))
is.POSIXt(datos$fecha)
colores <- c("Pulsaciones" = "firebrick",
"PresiÃ³n arterial mÃ¡xima" = "darkblue",
"PresiÃ³n arterial mÃ­nima" = "darkorange")
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "PresiÃ³n arterial mÃ¡xima"), size = 1.5) +
geom_line(aes(y = min, color = "PresiÃ³n arterial mÃ­nima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presiÃ³n y pulsaciones", "Â¿TendrÃ¡ algÃºn problema mamÃ¡?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "PresiÃ³n arterial mÃ¡xima"), size = 1.5) +
geom_line(aes(y = min, color = "PresiÃ³n arterial mÃ­nima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
scale_x_continuous(labels = label_date(format = "%d/%m")) +
ggtitle("Seguimiento de presiÃ³n y pulsaciones", "Â¿TendrÃ¡ algÃºn problema mamÃ¡?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "PresiÃ³n arterial mÃ¡xima"), size = 1.5) +
geom_line(aes(y = min, color = "PresiÃ³n arterial mÃ­nima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presiÃ³n y pulsaciones", "Â¿TendrÃ¡ algÃºn problema mamÃ¡?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200), labels = label_date(format = "%d/%m")) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "PresiÃ³n arterial mÃ¡xima"), size = 1.5) +
geom_line(aes(y = min, color = "PresiÃ³n arterial mÃ­nima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presiÃ³n y pulsaciones", "Â¿TendrÃ¡ algÃºn problema mamÃ¡?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "PresiÃ³n arterial mÃ¡xima"), size = 1.5) +
geom_line(aes(y = min, color = "PresiÃ³n arterial mÃ­nima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
geom_vline(xintercept = as.POSIXct("2020-08-04"), linetype = "dashed", size = 1.5, color = "gray") +
geom_vline(xintercept = as.POSIXct("2020-08-06"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presiÃ³n y pulsaciones", "Â¿TendrÃ¡ algÃºn problema mamÃ¡?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "PresiÃ³n arterial mÃ¡xima"), size = 1.5) +
geom_line(aes(y = min, color = "PresiÃ³n arterial mÃ­nima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1, color = "gray") +
geom_vline(xintercept = as.POSIXct("2020-08-04"), linetype = "dashed", size = 1, color = "gray") +
geom_vline(xintercept = as.POSIXct("2020-08-06"), linetype = "dashed", size = 1, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presiÃ³n y pulsaciones", "Â¿TendrÃ¡ algÃºn problema mamÃ¡?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
install.packages("purrr")
mtcars
library(purrr)
map_dbl(mtcars, mean)
map_dbl(mtcars, mean)
?f
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(1000)
pmap_dbl(list(trim = trims), mean, x = x)
map_dbl(trims, mean, x = x)
map_dbl(trims, mean, x = x)
pmap_dbl(mtcars, mean)
map_dbl(mtcars, mean)
library(purrr)
c <- 1:10
map_int(c, ~x+10)
map_int(c, ~.x + 10)
c <- 1:10
map_int(c, ~.x + 10)
vec <- 1:10
map_int(vec, ~.x + 10)
map_dbl(vec, ~.x + 10)
vec %>%
map_dbl(~ .x + 10) %>%
map_dbl(~ .x / 10) %>%
mean()
vec %>%
map_dbl(~ .x + 10) %>%
map_dbl(~ .x / 10) %>%
mean()
