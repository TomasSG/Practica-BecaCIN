write.csv(summary(modelo_it0)$coefficients, "./resultados/summary_log_modeloit0")
write.csv(summary(modelo_it0)$coefficients, "./resultados/summary_log_modeloit0.csv")
modelo_it1 <- glm(sobrevivio ~ clase + sexo + edad, data = datos_it1, family = "binomial")
summary(modelo_it1)
write.csv(summary(modelo_it1)$coefficients, "./resultados/summary_log_modeloit1.csv")
valor_corte <- .5
valor_corte <- .5
install.packages("caret")
datos <- dato
datos <- datos_it1
valores_reals <- datos_it1$sobrevivio
valores_reales <- datos_it1$sobrevivio
probabilidades <- modelo_it1$fitted.values
signo_negativo <- 0
signo_positivo <- 1
predicciones <- ifelse(probabilidades > valor_corte, signo_positivo, signo_negativo)
predicciones
predicciones <- as.factor(ifelse(probabilidades > valor_corte, signo_positivo, signo_negativo))
predicciones
valores_reales
predicciones
matriz <- confusionMatrix(predicciones, valores_reales)
predicciones <- as.factor(ifelse(probabilidades > valor_corte, signo_positivo, signo_negativo))
matriz <- confusionMatrix(predicciones, valores_reales)
matriz <- confusionMatrix(predicciones, valores_reales)
library(caret) #confusionMatrix
matriz <- confusionMatrix(predicciones, valores_reales)
library(caret) #confusionMatrix
matriz <- confusionMatrix(predicciones, valores_reales)
install.packages("e1071")
library(caret) #confusionMatrix
matriz <- confusionMatrix(predicciones, valores_reales)
matriz
matriz <- confusionMatrix(predicciones, valores_reales)+
matriz$positive
matriz <- confusionMatrix(predicciones, valores_reales)+
matriz$positive
matriz <- confusionMatrix(predicciones, valores_reales)+
matriz$overall
matriz <- confusionMatrix(predicciones, valores_reales)+
matriz$
matriz <- confusionMatrix(predicciones, valores_reales)+
matriz$
matriz <- confusionMatrix(predicciones, valores_reales)
matriz <- confusionMatrix(predicciones, valores_reales)
matriz$positive
matriz$overall
matriz$byClass
matriz$mode
class(matriz$byClass)
matriz$byClass["sensitivity"]
matriz$byClass["Sensitivity"]
matriz$byClass["Specificity"]
sensitividad <- matriz$byClass["Sensitivity"]
especificidad <- matriz$byClass["Specificity"]
sensitividad
especificidad
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad)
df_resultado
df_resultado
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
row.names = FALSE)
df_resultado
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
row.names = "")
df_resultado
df_resultado
df_aux <- data.frame("valor_corte" = .36,
"sensitividad" = 3,
"especificidad" = 4,
row.names = NA)
df_aux
df_aux <- data.frame("valor_corte" = .36,
"sensitividad" = 3,
"especificidad" = 4,
row.names = NA)
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
row.names = NA)
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
row.names = NA)
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
row.names = NA)
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
row.names = "")
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
row.names = NA)
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
row.names = NULL)
df_resultado
df_aux <- data.frame("valor_corte" = .36,
"sensitividad" = 3,
"especificidad" = 4,
row.names = NULL)
df_aux
df_nuevo <- data.frame(df_nuevo, df_resultado)
df_nuevo <- NULL
df_nuevo <- data.frame(df_nuevo, df_resultado)
df_nuevo <- NULL
df_nuevo <- data.frame(df_nuevo, df_resultado)
df_nuevo <- data.frame(df_aux, df_resultado)
df_nuevo
df_nuevo
df_nuevo
df_nuevo
df_nuevo <- cbind(df_aux, df_resultado)
df_nuevo
df_nuevo
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
row.names = NULL)
df_aux <- data.frame("valor_corte" = .36,
"sensitividad" = 3,
"especificidad" = 4,
row.names = NULL)
df_nuevo <- cbind(df_aux, df_resultado)
df_nuevo
df_nuevo <- rbind(df_aux, df_resultado)
df_nuevo
accuaricy <- matriz$overall
matriz$overall
accuracy <- matriz$overall["Accuracy"]
accuracy
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
"accuracy" = accuaricy,
row.names = NULL)
df_resultado
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
"accuracy" = accuaricy,
row.names = NULL)
df_resultado
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
"accuracy" = accuracy,
row.names = NULL)
df_resultado
obtener_resultados_matriz_confusion <- function(valores_reales, valor_corte,
probabilidades_estimadas,
signo_negativo = 0, signo_positivo = 1) {
# Realizo las predicciones con el valor de corte
predicciones <- as.factor(ifelse(probabilidades_estimadas > valor_corte, signo_positivo, signo_negativo))
# Obtengo la matriz de confusi贸n
matriz <- confusionMatrix(predicciones, valores_reales)
# Extraigo la informaci贸n que me interesa
sensitividad <- matriz$byClass["Sensitivity"]
especificidad <- matriz$byClass["Specificity"]
accuracy <- matriz$overall["Accuracy"]
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
"accuracy" = accuracy,
row.names = NULL)
return(df_resultado)
}
obtener_resultados_matriz_confusion(datos_it1$sobrevivio,
.5,
modelo_it1$fitted.values)
obtener_resultados_todos_posibles_valores_criticos<- function(valores_reales,
valor_corte = .5,
probabilidades_estimadas,
signo_negativo = 0,
signo_positivo = 1,
separacion = .01) {
valores_criticos <- seq(0, 1, separacion)
}
obtener_resultados_todos_posibles_valores_criticos<- function(valores_reales,
probabilidades_estimadas,
signo_negativo = 0,
signo_positivo = 1,
separacion = .01) {
valores_criticos <- seq(0, 1, separacion)
df_resultado <- map(valores_criticos,
obtener_resultados_matriz_confusion,
valores_reales = valores_reales,
probabilidades_estimadas = probabilidades_estimadas,
signo_negativo = signo_negativo,
signo_positivo = signo_positivo)
return(df_resultado)
}
obtener_resultados_todos_posibles_valores_criticos(datos_it1$sobrevivio,
modelo_it1$fitted.values,
separacion = .5)
library(purrr)
obtener_resultados_todos_posibles_valores_criticos(datos_it1$sobrevivio,
modelo_it1$fitted.values,
separacion = .5)
resultado <- map(valores_criticos,
obtener_resultados_matriz_confusion,
valores_reales = valores_reales,
probabilidades_estimadas = probabilidades_estimadas,
signo_negativo = signo_negativo,
signo_positivo = signo_positivo)
obtener_resultados_todos_posibles_valores_criticos<- function(valores_reales,
probabilidades_estimadas,
signo_negativo = 0,
signo_positivo = 1,
separacion = .01) {
valores_criticos <- seq(0, 1, separacion)
resultado <- map(valores_criticos,
obtener_resultados_matriz_confusion,
valores_reales = valores_reales,
probabilidades_estimadas = probabilidades_estimadas,
signo_negativo = signo_negativo,
signo_positivo = signo_positivo)
return(as.data.frame(resultado))
}
obtener_resultados_todos_posibles_valores_criticos(datos_it1$sobrevivio,
modelo_it1$fitted.values,
separacion = .5)
valores_criticos <- seq(0, 1, separacion)
obtener_resultados_todos_posibles_valores_criticos<- function(valores_reales,
probabilidades_estimadas,
signo_negativo = 0,
signo_positivo = 1,
separacion = .01) {
valores_criticos <- seq(0, 1, separacion)
resultado <- map_df(valores_criticos,
obtener_resultados_matriz_confusion,
valores_reales = valores_reales,
probabilidades_estimadas = probabilidades_estimadas,
signo_negativo = signo_negativo,
signo_positivo = signo_positivo)
return(resultado)
}
obtener_resultados_todos_posibles_valores_criticos(datos_it1$sobrevivio,
modelo_it1$fitted.values,
separacion = .5)
obtener_resultados_matriz_confusion <- function(valor_corte = .5,
valores_reales,
probabilidades_estimadas,
signo_negativo = 0,
signo_positivo = 1) {
# Realizo las predicciones con el valor de corte
predicciones <- ifelse(probabilidades_estimadas > valor_corte, signo_positivo, signo_negativo)
predicciones_factor <- factor(predicciones, levels = levels(valores_reales))
# Obtengo la matriz de confusi贸n
matriz <- confusionMatrix(predicciones_factor, valores_reales)
# Extraigo la informaci贸n que me interesa
sensitividad <- matriz$byClass["Sensitivity"]
especificidad <- matriz$byClass["Specificity"]
accuracy <- matriz$overall["Accuracy"]
df_resultado <- data.frame("valor_corte" = valor_corte,
"sensitividad" = sensitividad,
"especificidad" = especificidad,
"accuracy" = accuracy,
row.names = NULL)
return(df_resultado)
}
obtener_resultados_todos_posibles_valores_criticos(datos_it1$sobrevivio,
modelo_it1$fitted.values,
separacion = .5)
source("./R/Utils.R")
df_valores_corte <- obtener_resultados_todos_posibles_valores_criticos(
valores_reales = datos_it1$sobrevivio,
probabilidades_estimadas = modelo_it1$fitted.values)
df_valores_corte
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad), color = "darkred") +
geom_line(aes(y = especificidad), color = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad), color = "darkblue") +
geom_line(aes(y = especificidad), color = "firebrick")
tipos_lineas <- c("sensitividad" = "b", "especificidad" = "d")
ggplot(df_valores_corte, aes(x = valor_corte, linetype = tipos_lineas)) +
geom_line(aes(y = sensitividad), color = "darkblue") +
geom_line(aes(y = especificidad), color = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue") +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte), size = 2) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue") +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte), size = 33) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue") +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue", size = 33) +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue", size = 2) +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue", size = 1.5) +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick")
tipos_lineas <- c("sensitividad" = "b", "especificidad" = "d")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue", size = 1.5) +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick", size = 1.3)
tipos_lineas <- c("sensitividad" = "b", "especificidad" = "d")
tipos_lineas <- c("sensitividad" = "i", "especificidad" = "d")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick", size = 1.3)
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick", size = 1.3)
tipos_lineas <- c("sensitividad" = "k", "especificidad" = "d")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad"), color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad"), color = "firebrick", size = 1.3)
tipos_lineas <- c("sensitividad_linea" = "k", "especificidad_linea" = "d")
tipos_lineas <- c("sensitividad_linea" = "k", "especificidad_linea" = "d")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad_linea"), color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea"), color = "firebrick", size = 1.3)
tipos_lineas <- c("sensitividad_linea" = "k", "especificidad_linea" = "d")
color <- c("sensitividad_color" = "darkblue", "especificidad_color" = "firebrick")
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad_linea"), color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea"), color = "firebrick", size = 1.3)
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad_linea", color = "sensitividad_color")
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3)
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad_linea", color = "sensitividad_color")
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3)
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3) +
scale_x_continuous(breaks = seq(0, 1, .01))
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad_linea", color = "sensitividad_color")
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3) +
scale_x_continuous(breaks = seq(0, 1, .01))
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad_linea", color = "sensitividad_color")
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3) +
scale_x_continuous(breaks = seq(0, 1, .1))
index <- which(df_valores_corte, sensitividad == especificidad)
index <- which(df_valores_corte[sensitividad == especificidad,])
index <- which(df_valores_corte[df_valores_corte$sensitividad == especificidad,])
index <- which(df_valores_corte[df_valores_corte$sensitividad == df_valores_corte$especificidad,])
df_valores_corte %>%
filter(sensitividad == especificidad)
View(df_valores_corte)
snames(df_valores_corte)
names(df_valores_corte)
df_valores_corte %>%
filter(sensitividad == especificidad)
df_valores_corte <- obtener_resultados_todos_posibles_valores_criticos(
valores_reales = datos_it1$sobrevivio,
probabilidades_estimadas = modelo_it1$fitted.values)
df_valores_corte %>%
filter(sensitividad == especificidad)
df_valores_corte
df_valores_corte %>%
filter(sensitividad == especificidad)
df_valores_corte %>%
filter(sensitividad = especificidad)
df_valores_corte %>%
filter(sensitividad == 0)
df_valores_corte %>% dpylr::filter(sensitividad == especificidad)
library(dplyr)
df_valores_corte %>% dpylr::filter(sensitividad == especificidad)
df_valores_corte %>% dplyr::filter(sensitividad == especificidad)
df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.001)
df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.01)
df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.001)
df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.01)
View(df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.01))
write.csv(df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.01),
"./resultados/aux.csv")
write.csv(df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.01),
"./resultados/aux.csv")
write.csv(df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.01),"./resultados/aux.csv")
write.csv(df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.01),"./resultados/aux.csv")
aux <- df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.01)
write.csv(aux,"./resultados/aux.csv")
write.csv(aux,"./resultados/aux.csv", append = FALSE)
write.csv(aux,"./resultados/aux.csv")
write.csv(aux,"./resultados/asadsa.csv")
rm(aux)
index <- which(df_valores_corte$sensitividad == df_valores_corte$especificidad)
index
df_valores_corte %>% dplyr::filter(abs(sensitividad - especificidad) < 0.01)
index <- which(df_valores_corte$valor_corte == .42)
index
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3) +
geom_point(df_valores_corte[index,])
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3) +
geom_point(df_valores_corte[index,], aes(y = sensitividad)) +
scale_x_continuous(breaks = seq(0, 1, .1))
ggplot
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad_linea", color = "sensitividad_color")
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3) +
#geom_point(df_valores_corte[index,], aes(y = sensitividad)) +
scale_x_continuous(breaks = seq(0, 1, .1))
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3) +
scale_x_continuous(breaks = seq(0, 1, .1))
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3) +
scale_x_continuous(breaks = seq(0, 1, .1))
ggplot(df_valores_corte, aes(x = valor_corte)) +
geom_line(aes(y = sensitividad, linetype = "sensitividad_linea", color = "sensitividad_color")
, color = "darkblue", size = 1.3) +
geom_line(aes(y = especificidad, linetype = "especificidad_linea", color = "especificidad_color"),
color = "firebrick", size = 1.3) +
scale_x_continuous(breaks = seq(0, 1, .1))
ggplot(df_valores_corte, aes(valor_corte, accuracy)) + geom_line
ggplot(df_valores_corte, aes(valor_corte, accuracy)) + geom_line()
datos_it2 <- datos_it1 %>%
mutate(sobrevivio = factor(sobrevivio,
levels = c(1, 0),
labels = c("Si", "No")))
valor_corte <- .42
predicciones <- ifelse(modelo_it1$fitted.values > valor_corte, "Si", "No")
source("./R/Utils.R")
library(caret) #confusionMatrix
confusionMatrix(predicciones, datos_it2$sobrevivio)
predicciones_factor <- factor(predicciones,
levels = c("Si", "No"))
confusionMatrix(predicciones, datos_it2$sobrevivio)
predicciones_factor <- factor(predicciones,
levels = c(1, 0),
labels = c("Si", "No"))
confusionMatrix(predicciones, datos_it2$sobrevivio)
datos_it2 <- datos_it1 %>%
mutate(sobrevivio = factor(sobrevivio,
levels = c(1, 0),
labels = c("Si", "No")))
predicciones <- ifelse(modelo_it1$fitted.values > valor_corte, 1, 0)
predicciones_factor <- factor(predicciones,
levels = c(1, 0),
labels = c("Si", "No"))
confusionMatrix(predicciones, datos_it2$sobrevivio)
predicciones
predicciones_factor
predicciones_factor <- factor(predicciones,
levels = c(1, 0),
labels = c("Si", "No"))
predicciones_factor
datos_it2$sobrevivio
confusionMatrix(ppredicciones_factor, datos_it2$sobrevivio)
confusionMatrix(predicciones_factor, datos_it2$sobrevivio)
m <- confusionMatrix(predicciones_factor, datos_it2$sobrevivio)
m$positive
m$overall
m$table
confusionMatrix(predicciones_factor, datos_it2$sobrevivio)$table
matriz_confusion <- confusionMatrix(predicciones_factor, datos_it2$sobrevivio)
write.csv(matriz_confusion, "./resultados/matriz_confusion.csv")
write.csv(matriz_confusion$table, "./resultados/matriz_confusion.csv")
matriz_confusion
which.max(df_valores_corte$accuracy)
ddf_valores_corte[51,]
df_valores_corte[51,]
table(datos_it1$sobrevivio, datos_it1$clase)
table(datos_it1$sobrevivio, datos_it1$sexo)
table(datos_it1$sobrevivio, datos_it1$clase)
table(datos_it1$sobrevivio, datos_it1$sexo)
write.csv(t1, "./resultados/t1.csv")
write.csv(as.data.frame(t1), "./resultados/t1.csv")
t1 <- table(datos_it1$sobrevivio, datos_it1$clase)
t2 <- table(datos_it1$sobrevivio, datos_it1$sexo)
write.csv(as.data.frame(t1), "./resultados/t1.csv")
write.csv(t1, "./resultados/t1.csv")
write.csv(t2, "./resultados/t2.csv")
step(modelo_it1, direction = "both")
step(modelo_it1, direction = "both")
modelo_it1$deviance
ggplot(modelo_it1$df.residual)
# Buscamos posibles outliers
modelo_it1$df.residual
# Buscamos posibles outliers
modelo_it1$residuals
