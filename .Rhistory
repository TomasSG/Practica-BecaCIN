scale_y_continuous(labels = label_percent()) +
coord_cartesian(ylim = c(0, 1)) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(es_primera, prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
facet_grid(. ~ es_primera) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
coord_cartesian(ylim = c(0, 1)) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
View(datos)
g1 <- ggplot(datos, aes(es_primera, fare, color = es_primera)) +
geom_boxplot(show.legend = FALSE) +
ylab("Tarifa") +
xlab("") +
ggtitle("") +
scale_y_continuous(labels = label_number(prefix = "$"))
g2 <- ggplot(datos, aes(fare, es_primera, color = es_primera)) +
geom_point(alpha = .4, show.legend = FALSE) +
xlab("Tarifa") +
ylab("") +
ggtitle("") +
scale_x_continuous(labels = label_number(prefix = "$"))
annotate_figure(ggarrange(g1, g2, nrow = 1, ncol = 2),
top = text_grob("Tarifa contra indicador de primera clase (sin zoom)",
size = TAMANIO_LETRA_TITULO_PRINCIPAL, color = "black", family = FAMILIA_LETRA))
g1 <- g1 + coord_cartesian(ylim = c(0, 200))
g2 <- g2 + coord_cartesian(xlim = c(0, 200))
annotate_figure(ggarrange(g1, g2, nrow = 1, ncol = 2),
top = text_grob("Tarifa contra indicador de primera clase (con zoom)",
size = TAMANIO_LETRA_TITULO_PRINCIPAL,
color = "black", family = FAMILIA_LETRA))
ggplot(datos, aes(survived, age)) +
geom_point()
modelo <- glm(es_primera ~ fare, data =  datos, family = "binomial")
summary(modelo)
# Primero generamos nuevos puntos
nuevos_puntos <- seq(min(datos$fare), max(datos$fare), .5)
# Ahora, predecimos las probabilidades
predicciones <- predict(modelo, data.frame(fare = nuevos_puntos), type = "response")
# Graficamos las probabilidades
df_aux <- data.frame(predicciones = predicciones, fare = nuevos_puntos)
ggplot(df_aux, aes(fare, predicciones)) +
geom_line(color = "darkblue") +
xlab("Tarifa") +
ylab("P(Y = 1|X)") +
ggtitle("Predicciones realizadas") +
scale_x_continuous(label = label_number(prefix = "$")) +
coord_cartesian(xlim = c(0, 150))
nrow(datos)
anova(modelo, test = "Chisq")
# Primero realizamos las predicciones con los datos
predicciones <- ifelse(modelo$fitted.values > 0.5, 1, 0)
# Armamos un df para ver si es capaz de clasificar correctamente
df <- data.frame(fare = modelo$model$fare, es_primera = modelo$model$es_primera,
predicciones = predicciones)
df <- df %>% mutate(prediccion_correcta = ifelse(predicciones == es_primera,
"Correcto",
"No correcto"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(es_primera, prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
facet_grid(. ~ es_primera) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
df %>%
mutate(es_primera = factor(es_primera,
levels = c(0, 1),
labels = c("No es primera clase", "Si es primera clase"))) %>%
group_by(prediccion_correcta) %>%
summarise(freq_abs = n()) %>%
mutate(freq_rel = freq_abs / sum(freq_abs)) %>%
ggplot(aes(prediccion_correcta, freq_rel, fill = prediccion_correcta)) +
geom_bar(stat = "identity", alpha = .6, show.legend = FALSE) +
xlab("") +
ylab("Proporciones") +
ggtitle("Proporciones de predicciones correctas") +
scale_y_continuous(labels = label_percent()) +
coord_cartesian(ylim = c(0, 1)) +
scale_fill_manual(values = c("#33FF52","#FF3333"))
rm(list = ls())
library(readxl, warn.conflicts = FALSE)
library(ggplot2)
library(ggthemes)
library(extrafont)
library(scales)
library(lubridate)
font_import()
View(datos)
datos <- read_excel("../../../Gaby-presion-JULIO 2020.xlsx")
datos <- read_excel("./data//Gaby-presion-JULIO 2020.xlsx")
datos <- read_excel("./data/Gaby-presion-JULIO 2020.xlsx")
View(datos)
names(datos) <- gsub("á", "a", tolower(names(datos)))
names(datos)[6] <- "pulsaciones"
datos$momento <- factor(datos$momento, levels = c("M", "T", "N"), labels = c("Mañana", "Tarde", "Noche"))
is.POSIXt(datos$fecha)
colores <- c("Pulsaciones" = "firebrick",
"Presión arterial máxima" = "darkblue",
"Presión arterial mínima" = "darkorange")
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "Presión arterial máxima"), size = 1.5) +
geom_line(aes(y = min, color = "Presión arterial mínima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presión y pulsaciones", "¿Tendrá algún problema mamá?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
names(datos) <- gsub("í", "i", tolower(names(datos)))
names(datos)[6] <- "pulsaciones"
datos$momento <- factor(datos$momento, levels = c("M", "T", "N"), labels = c("Mañana", "Tarde", "Noche"))
is.POSIXt(datos$fecha)
colores <- c("Pulsaciones" = "firebrick",
"Presión arterial máxima" = "darkblue",
"Presión arterial mínima" = "darkorange")
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "Presión arterial máxima"), size = 1.5) +
geom_line(aes(y = min, color = "Presión arterial mínima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presión y pulsaciones", "¿Tendrá algún problema mamá?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
datos <- read_excel("./data/Gaby-presion-JULIO 2020.xlsx")
View(datos)
datos$momento <- factor(datos$momento, levels = c("M", "T", "N"), labels = c("Mañana", "Tarde", "Noche"))
datos <- read_excel("./data/Gaby-presion-JULIO 2020.xlsx")
View(datos)
names(datos) <- gsub("á", "a", tolower(names(datos)))
names(datos) <- gsub("í", "i", tolower(names(datos)))
names(datos)[6] <- "pulsaciones"
datos$momento <- factor(datos$momento, levels = c("M", "T", "N"), labels = c("Mañana", "Tarde", "Noche"))
is.POSIXt(datos$fecha)
colores <- c("Pulsaciones" = "firebrick",
"Presión arterial máxima" = "darkblue",
"Presión arterial mínima" = "darkorange")
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "Presión arterial máxima"), size = 1.5) +
geom_line(aes(y = min, color = "Presión arterial mínima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presión y pulsaciones", "¿Tendrá algún problema mamá?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "Presión arterial máxima"), size = 1.5) +
geom_line(aes(y = min, color = "Presión arterial mínima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
scale_x_continuous(labels = label_date(format = "%d/%m")) +
ggtitle("Seguimiento de presión y pulsaciones", "¿Tendrá algún problema mamá?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "Presión arterial máxima"), size = 1.5) +
geom_line(aes(y = min, color = "Presión arterial mínima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presión y pulsaciones", "¿Tendrá algún problema mamá?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200), labels = label_date(format = "%d/%m")) +
scale_x_datetime(labels = date_format("%d/%m/%y"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "Presión arterial máxima"), size = 1.5) +
geom_line(aes(y = min, color = "Presión arterial mínima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presión y pulsaciones", "¿Tendrá algún problema mamá?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "Presión arterial máxima"), size = 1.5) +
geom_line(aes(y = min, color = "Presión arterial mínima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1.5, color = "gray") +
geom_vline(xintercept = as.POSIXct("2020-08-04"), linetype = "dashed", size = 1.5, color = "gray") +
geom_vline(xintercept = as.POSIXct("2020-08-06"), linetype = "dashed", size = 1.5, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presión y pulsaciones", "¿Tendrá algún problema mamá?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
ggplot(datos, aes(x = fecha)) +
geom_line(aes(y = pulsaciones, color = "Pulsaciones"), size = 1.5) +
geom_line (aes(y = max, color = "Presión arterial máxima"), size = 1.5) +
geom_line(aes(y = min, color = "Presión arterial mínima"), size = 1.5) +
geom_vline(xintercept = as.POSIXct("2020-07-21"), linetype = "dashed", size = 1, color = "gray") +
geom_vline(xintercept = as.POSIXct("2020-08-04"), linetype = "dashed", size = 1, color = "gray") +
geom_vline(xintercept = as.POSIXct("2020-08-06"), linetype = "dashed", size = 1, color = "gray") +
theme_classic() +
xlab("Fecha") +
ylab("") +
labs(color = "Curvas") +
ggtitle("Seguimiento de presión y pulsaciones", "¿Tendrá algún problema mamá?") +
theme(plot.title = element_text(color = "black", size = 25),
plot.subtitle = element_text(size = 20),
axis.title = element_text(color = "black", size = 15),
text = element_text(family = "Century"),
panel.grid.major = element_line(color = "gray"),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.position = "bottom") +
scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +
scale_x_datetime(labels = date_format("%d/%m"), breaks = date_breaks("4 day")) +
facet_wrap(~ momento)
install.packages("purrr")
mtcars
library(purrr)
map_dbl(mtcars, mean)
map_dbl(mtcars, mean)
?f
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(1000)
pmap_dbl(list(trim = trims), mean, x = x)
map_dbl(trims, mean, x = x)
map_dbl(trims, mean, x = x)
pmap_dbl(mtcars, mean)
map_dbl(mtcars, mean)
library(purrr)
c <- 1:10
map_int(c, ~x+10)
map_int(c, ~.x + 10)
c <- 1:10
map_int(c, ~.x + 10)
vec <- 1:10
map_int(vec, ~.x + 10)
map_dbl(vec, ~.x + 10)
vec %>%
map_dbl(~ .x + 10) %>%
map_dbl(~ .x / 10) %>%
mean()
vec %>%
map_dbl(~ .x + 10) %>%
map_dbl(~ .x / 10) %>%
mean()
rm(list = ls())
library(readxl)
datos <- read_excel("./data/datasets_383055_741735_CarPrice_Assignment.csv")
datos <- read.csv("./data/datasets_383055_741735_CarPrice_Assignment.csv")
View(datos)
names(datos)
library(dplyr)
datos_crudos <- read.csv("./data/datasets_383055_741735_CarPrice_Assignment.csv")
datos <- datos_crudos %>%
mutate(fueltype = as.factor(fueltype))
datos_crudos <- read.csv("./data/datasets_383055_741735_CarPrice_Assignment.csv")
datos <- datos_crudos %>%
mutate(fueltype = as.factor(fueltype))
ggpairs(datos,
low = list(continuous = wrap("smooth", alpha = .6)), axisLabels = "none",
diag = list(continuous = "densityDiag")) +
theme_few() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5),
text = element_text(family = "Rekha")) +
ggtitle("Prueba GGaly", "Esto es un subtitulo") +
scale_color_brewer(palette = "Dark2")
?ggpairs
library(GGally) #ggpair
ggpairs(datos,
low = list(continuous = wrap("smooth", alpha = .6)), axisLabels = "none",
diag = list(continuous = "densityDiag")) +
theme_few() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5),
text = element_text(family = "Rekha")) +
ggtitle("Prueba GGaly", "Esto es un subtitulo") +
scale_color_brewer(palette = "Dark2")
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = `Life Exp`, asesinatos = Murder,
universitarios = `HS Grad`, heladas = Frost, area = Area,
.data = datos)
ggpairs(datos,
low = list(continuous = wrap("smooth", alpha = .6)), axisLabels = "none",
diag = list(continuous = "densityDiag")) +
theme_few() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5),
text = element_text(family = "Rekha")) +
ggtitle("Prueba GGaly", "Esto es un subtitulo") +
scale_color_brewer(palette = "Dark2")
library(ggthemes, warn.conflicts = FALSE)
ggpairs(datos,
low = list(continuous = wrap("smooth", alpha = .6)), axisLabels = "none",
diag = list(continuous = "densityDiag")) +
theme_few() +
theme(plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5),
text = element_text(family = "Rekha")) +
ggtitle("Prueba GGaly", "Esto es un subtitulo") +
scale_color_brewer(palette = "Dark2")
ggcorrplot(cor(datos[, c("habitantes", "asesinatos", "universitarios", "heladas")], method = "pearson"),
ggtheme = theme_bw,
hc.order = TRUE,
lab = TRUE,
lab_size = 6,
type = "lower",
colors = c("#ff0084", "#ededed", "#e73827"))
library(corrplot, warn.conflicts = FALSE)
library(ggcorrplot, warn.conflicts = FALSE)
ggcorrplot(cor(datos[, c("habitantes", "asesinatos", "universitarios", "heladas")], method = "pearson"),
ggtheme = theme_bw,
hc.order = TRUE,
lab = TRUE,
lab_size = 6,
type = "lower",
colors = c("#ff0084", "#ededed", "#e73827"))
library(ggcorrplot)
datos_crudos <- read.csv("./data/datasets_383055_741735_CarPrice_Assignment.csv")
datos <- datos_crudos %>%
mutate(fueltype = as.factor(fueltype))
source('C:/Users/tomas/OneDrive/Escritorio/ProyectosR/exer/PracticaInvestigacion/R/EjemploRegresionLinealMultiple2.R', echo=TRUE)
matriz_correlacion <- datos_crudos %>%
select(carlength, carwidth, carheight, horsepower) %>%
cor(method = "pearson")
matriz_correlacion
datos_crudos %>%
select(carlength, carwidth, carheight, horsepower) %>%
cor(method = "pearson") %>%
ggcorrplot(type = "lower", lab = TRUE)
datos_crudos %>%
select(carlength, carwidth, carheight, horsepower, price) %>%
cor(method = "pearson") %>%
ggcorrplot(type = "lower", lab = TRUE)
datos_crudos %>%
select(carlength, carwidth, carheight, horsepower, price) %>%
cor(method = "pearson") %>%
ggcorrplot(type = "lower", lab = TRUE)
datos_crudos %>%
#select(carlength, carwidth, carheight, horsepower, price) %>%
cor(method = "pearson") %>%
ggcorrplot(type = "lower", lab = TRUE)
datos_crudos %>%
select(carlength, carwidth, carheight, horsepower, price) %>%
cor(method = "pearson") %>%
ggcorrplot(type = "lower", lab = TRUE)
datos %>%
select(carlength, carwidth, carheight, horsepower, price) %>%
cor(method = "pearson") %>%
ggcorrplot(type = "lower", lab = TRUE)
ggplot(datos, aes(fueltype, price, color = fueltype)) +
geom_boxplot()
ggplot(datos, aes(fueltype, price, fill = fueltype)) +
geom_boxplot()
ggplot(datos, aes(fueltype, price, fill = fueltype)) +
geom_boxplot() +
geom_jitter(width = .1)
datos %>%
select(carlength, carwidth, carheight, horsepower, price) %>%
cor(method = "pearson") %>%
ggcorrplot(type = "lower", lab = TRUE)
datos %>%
select(carlength, carwidth, carheight, horsepower, price, wheelbase, curbweight,
enginesize, boreratio, stroke, compressionratio, peakrpm, citympg, highwaympg) %>%
cor(method = "pearson") %>%
ggcorrplot(type = "lower", lab = TRUE)
datos %>%
select(carlength, carwidth, carheight, horsepower, wheelbase, curbweight, enginesize,
boreratio, stroke, compressionratio, peakrpm, citympg, highwaympg, price) %>%
cor(method = "pearson") %>%
ggcorrplot(type = "lower", lab = TRUE)
datos %>%
select(carlength, carwidth, carheight, horsepower, wheelbase, curbweight, enginesize,
boreratio, stroke, compressionratio, peakrpm, citympg, highwaympg, price) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
ggplot(datos, aes(fueltype, price, fill = fueltype)) +
geom_boxplot() +
geom_jitter(width = .1)
lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltye, data = datos)
lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
datos_crudos <- read.csv("./data/datasets_383055_741735_CarPrice_Assignment.csv")
datos <- datos_crudos
ggplot(datos, aes(fueltype, price, fill = fueltype)) +
geom_boxplot() +
geom_jitter(width = .1)
<- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
datos <- datos_crudos %>%
mutate(fueltype = as.factor(fueltype))
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
