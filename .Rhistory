if(is.na(datos[i]))
names(datos)[i]
}
warning()
warnings()
warnings()
for(i in seq_along(datos)){
if(is.na(datos[ ,i]))
names(datos)[i]
}
for(i in seq_along(datos)){
if(is.na(datos[ ,i])) {
names(datos)[i]
}
}
for(i in seq_along(datos)){
if(is.na(datos[ ,i])) {
names(datos)[i]
}
}
warnings()
for(i in seq_along(datos)){
if(anyNA(datos[ ,i])) {
names(datos)[i]
}
}
for(i in seq_along(datos)){
if(anyNA(datos[ ,i])) {
names(datos)[i]
}
}
for(i in seq_along(datos)){
if(!anyNA(datos[ ,i])) {
names(datos)[i]
}
}
for(i in seq_along(datos)){
if(!anyNA(datos[ ,i])) {
names(datos)[i]
}
}
ver_variables_con_na <- function(df){
aux <- map_lgl(df, anyNa)
which(aux, useNames = TRUE, arr.ind = FALSE)
}
ver_variables_con_na <- function(df){
map_lgl(df, anyNa) %>%
which(useNames = TRUE, arr.ind = FALSE)
}
ver_variables_con_na(datos)
ver_variables_con_na <- function(df){
map_lgl(df, anyNA) %>%
which(useNames = TRUE, arr.ind = FALSE)
}
ver_variables_con_na(datos)
for(i in seq_along(datos)){
if(!anyNA(datos[ ,i])) {
names(datos)[i]
}
}
print(names(datos)[i])
for(i in seq_along(datos)){
if(!anyNA(datos[ ,i])) {
print(names(datos)[i])
}
}
for(i in seq_along(datos)){
if(anyNA(datos[ ,i])) {
print(names(datos)[i])
}
}
for(i in seq_along(datos)){
if(anyNA(datos[ ,i])) {
print(names(datos)[i])
}
}
for(i in seq_along(datos)){
if(!anyNA(datos[ ,i])) {
print(names(datos)[i])
}
}
ver_variables_con_na(datos)
ver_variables_con_na <- function(df){
map_lgl(df, !anyNA) %>%
which(useNames = TRUE, arr.ind = FALSE)
}
ver_variables_con_na(datos)
ver_variables_con_na <- function(df){
map_lgl(df, anyNA) %>%
which(useNames = TRUE, arr.ind = FALSE)
}
datos[1,2]
datos[1,2] <- NA
ver_variables_con_na(datos)
ver_variables_con_na <- function(df){
map_lgl(df, anyNA) %>%
which(useNames = TRUE, arr.ind = FALSE)
}
datos[1,2] <- NA
ver_variables_con_na(datos)
ver_variables_con_na <- function(df){
map_lgl(df, anyNA) %>%
which(arr.ind = FALSE)
}
ver_variables_con_na(datos)
ver_variables_con_na <- function(df){
map_lgl(df, anyNA) %>%
which(arr.ind = TRUE)
}
a
ver_variables_con_na(datos)
ver_variables_con_na <- function(df){
map_lgl(df, anyNA) %>%
which() %>%
names()
}
ver_variables_con_na(datos)
?which
ver_variables_con_na(datos)
datos <- datos_crudos %>%
mutate(fueltype = as.factor(fueltype))
ver_variables_con_na(datos)
ver_variables_con_na <- function(df){
map_lgl(df, anyNA) %>%
which() %>%
names()
}
ver_variables_con_na(datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
is.numeric(datos$carheight)
is.numeric(datos$carlength)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
names(datos)
datos_crudos <- read.csv("./data/datasets_383055_741735_CarPrice_Assignment.csv")
datos <- datos_crudos %>%
mutate(fueltype = as.factor(fueltype))
datos %>%
select(carlength, carwidth, carheight, horsepower, wheelbase, curbweight, enginesize,
boreratio, stroke, compressionratio, peakrpm, citympg, highwaympg, price) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
ggplot(datos, aes(fueltype, price, fill = fueltype)) +
geom_boxplot() +
geom_jitter(width = .1)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio + stroke, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize + boreratio, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight +
enginesize, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower, wheelbase + curbweight, data = datos)
modelo <- lm(price ~ carlength + carwidth + carheight + horsepower + wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
summary(modelo)
library(ggplot2)
step(modelo, direction = "both", trace = 1)
step(modelo, direction = "both")
modelo <- lm(formula = price ~ carwidth + carheight + horsepower + enginesize +
stroke + peakrpm + fueltype, data = datos)
summary(modelo)
step(modelo_sin_seleccionar, direction = "both")
modelo_sin_seleccionar <- lm(price ~ carlength + carwidth + carheight + horsepower + wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
summary(modelo_sin_seleccionar)
step(modelo_sin_seleccionar, direction = "both")
summary(modelo)
summary(modelo_sin_seleccionar)
summary(modelo)
summary(modelo_sin_seleccionar)
summary(modelo)
df_aux <- data.frame(valores_ajustado = modelo$fitted.values,
residuos_student = rstudent(modelo))
df_aux
df_aux <- data.frame(valores_ajustado = modelo$fitted.values,
residuos = modelo$residuals,
residuos_student = rstudent(modelo))
ggplot(df, aes(valores_ajustados, residuos_student)) +
geom_point()
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0)
df_aux <- data.frame(valores_ajustados = modelo$fitted.values,
residuos = modelo$residuals,
residuos_student = rstudent(modelo))
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0)
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick")
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick") +
geom_smooth()
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick")
?geom_segment
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick") +
geom_segment(aes(x = xend = valores_ajustados, y = 0, yend = residuos_student))
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick") +
geom_segment(aes(xend = valores_ajustados, y = 0, yend = residuos_student))
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick") +
geom_segment(aes(xend = valores_ajustados, y = 0, yend = residuos_student,
color = residuos_student))
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick")# +
ggplto(df_aux, aes(residuos)) +
geom_qq() +
geom_qq_line()
ggplot(df_aux, aes(residuos)) +
geom_qq() +
geom_qq_line()
ggplot(df_aux, aes(sample = residuos)) +
geom_qq() +
geom_qq_line()
shapiro.test(df_aux$residuos)
library(car)
dwt(modelo,alternative = "two.sided")
library(car)
vif(modelo)
modelo$coefficients
datos %>%
select(price, carwidth, carheight, horsepower, enginesize, stroke, peakrpm, fueltype) %>%
cor(method = "pearson") %>%
ggcorrplot()
datos %>%
select(price, carwidth, carheight, horsepower, enginesize, stroke, peakrpm) %>%
cor(method = "pearson") %>%
ggcorrplot()
datos %>%
select(price, carwidth, carheight, horsepower, enginesize, stroke, peakrpm) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
summary(modelo)
which(abs(df_aux$residuos_student) > 3)
summary(influence.measures(modelo))
which(abs(df_aux$residuos_student) > 3)
datos[50,]
datos[50,]
datos_crudos <- read.csv("./data/datasets_383055_741735_CarPrice_Assignment.csv")
datos <- datos_crudos %>%
mutate(fueltype = as.factor(fueltype))
library(readxl)
library(dplyr)
library(ggcorrplot) #ggcorrplot
library(ggplot2)
library(car)
source("./R/Utils.R")
datos_crudos <- read.csv("./data/datasets_383055_741735_CarPrice_Assignment.csv")
datos <- datos_crudos %>%
mutate(fueltype = as.factor(fueltype))
datos %>%
select(carlength, carwidth, carheight, horsepower, wheelbase, curbweight, enginesize,
boreratio, stroke, compressionratio, peakrpm, citympg, highwaympg, price) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
ggplot(datos, aes(fueltype, price, fill = fueltype)) +
geom_boxplot() +
geom_jitter(width = .1)
datos %>%
select(price, carwidth, carheight, horsepower, enginesize, stroke, peakrpm) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
df_aux <- data.frame(valores_ajustados = modelo$fitted.values,
residuos = modelo$residuals,
residuos_student = rstudent(modelo))
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick")# +
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick")# +
geom_segment(aes(xend = valores_ajustados, y = 0, yend = residuos_student,
color = residuos_student))
ggplot(df_aux, aes(sample = residuos)) +
geom_qq() +
geom_qq_line()
shapiro.test(df_aux$residuos)
vif(modelo)
which(abs(df_aux$residuos_student) > 3)
summary(influence.measures(modelo))
datos %>%
select(price, carwidth, carheight, horsepower, enginesize, stroke, peakrpm) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
summary(influence.measures(modelo))
summary(influence.measures(modelo))
View(summary(influence.measures(modelo)))
View(summary(influence.measures(modelo)))
which(abs(df_aux$residuos_student) > 3)
modelo <- lm(formula = price ~ carwidth + carheight + horsepower + enginesize +
stroke + peakrpm + fueltype, data = datos[-50,])
summary(modelo)
modelo <- lm(formula = price ~ carwidth + carheight + horsepower + enginesize +
stroke + peakrpm + fueltype, data = datos)
summary(modelo)
modelo_ajustado <- lm(formula = price ~ carwidth + carheight + horsepower + enginesize +
stroke + peakrpm + fueltype, data = datos[-50,])
summary(modelo)
summary(modelo_ajustado)
modelo_ajustado <- lm(formula = price ~ carwidth + carheight + horsepower + enginesize +
stroke + peakrpm + fueltype, data = datos[-50,])
modelo <- lm(formula = price ~ carwidth + carheight + horsepower + enginesize +
stroke + peakrpm + fueltype, data = datos)
summary(modelo)
summary(modelo_ajustado)
datos[-50,] %>%
select(price, carwidth, carheight, horsepower, enginesize, stroke, peakrpm) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
datos %>%
select(price, carwidth, carheight, horsepower, enginesize, stroke, peakrpm) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
datos[-50,] %>%
select(price, carwidth, carheight, horsepower, enginesize, stroke, peakrpm) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
df_aux <- data.frame(valores_ajustados = modelo$fitted.values,
residuos = modelo$residuals,
residuos_student = rstudent(modelo))
df_aux_ajustado <- data.frame(valores_ajustados = modelo_ajustado$fitted.values,
residuos = modelo_ajustad$residuals,
residuos_student = rstudent(modelo_ajustado))
df_aux_ajustado <- data.frame(valores_ajustados = modelo_ajustado$fitted.values,
residuos = modelo_ajustado$residuals,
residuos_student = rstudent(modelo_ajustado))
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick")
ggplot(df_aux, aes(sample = residuos)) +
geom_qq() +
geom_qq_line()
shapiro.test(df_aux$residuos)
vif(modelo)
df_aux_ajustado <- data.frame(valores_ajustados = modelo_ajustado$fitted.values,
residuos = modelo_ajustado$residuals,
residuos_student = rstudent(modelo_ajustado))
ggplot(df_aux, aes(valores_ajustados, residuos_student)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-3, 3), color = "firebrick")
ggplot(df_aux, aes(sample = residuos)) +
geom_qq() +
geom_qq_line()
shapiro.test(df_aux$residuos)
vif(modelo)
ggplot(df_aux, aes(sample = residuos)) +
geom_qq() +
geom_qq_line()
nrow(datos)
vif(modelo)
View(summary(influence.measures(modelo)))
summary(influence.measures(modelo))
datos %>%
select(carlength, carwidth, carheight, horsepower, wheelbase, curbweight, enginesize,
boreratio, stroke, compressionratio, peakrpm, citympg, highwaympg, price) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
g <- ggplot(datos, aes(x = price))
datos_crudos <- read.csv("./data/datasets_383055_741735_CarPrice_Assignment.csv")
datos <- datos_crudos %>%
mutate(fueltype = as.factor(fueltype))
g <- ggplot(datos, aes(x = price))
g1 <- g + geom_point(aes(y = carlength))
g1
g1 <- g + geom_point(aes(y = carlength))
g2 <- g + geom_point(aes(y = carwidth))
g3 <- g + geom_point(aes(y = horsepower))
g4 <- g + geom_point(aes(y = curbweight))
g5 <- g + geom_point(aes(y = enginesize))
g6 <- g + geom_point(aes(y = citympg))
g7 <- g + geom_point(aes(y = highwaympg))
library(GGally) #ggarrange
library(ggpubr) #ggarrange
lista_plots <- list()
lista_pltos$g1 <- g1
lista_plots <- list()
lista_plots$g1 <- g1
lista_plots$g1
arrange <- ggarrange(lista_plots)
lista_plots <- c()
lista_plots <- c(lista_plots,g1)
arrange <- ggarrange(lista_plots)
arrange <- ggarrange(g1, g2, g3, g4, g5, g6, g7, nrow = 2)
arrange
g <- ggplot(datos, aes(x = price))
g1 <- g + geom_point(aes(y = carlength))
g2 <- g + geom_point(aes(y = carwidth))
g3 <- g + geom_point(aes(y = horsepower))
g4 <- g + geom_point(aes(y = curbweight))
g5 <- g + geom_point(aes(y = enginesize))
g6 <- g + geom_point(aes(y = citympg))
g7 <- g + geom_point(aes(y = highwaympg))
arrange <- ggarrange(g1, g2, g3, g4, g5, g6, g7, nrow = 2)
ggarrange(g1, g2, g3, g4, g5, g6, g7, nrow = 2)
arrange <- ggarrange(g1, g2, g3, g4, g5, g6, g7, nrow = 2, ncol = 4)
arrange
arrange <- ggarrange(g1, g2, g3, g4, g5, g6, g7, nrow = 2, ncol = 4, )
arrange <- ggarrange(g1, g2, g3, g4, g5, g6, g7, nrow = 2, ncol = 4)
annotate_figure(arrange, top = text_grob("Diagramas dispersión de VI con R grande"))
View(datos)
datos <- datos_crudos %>%
select(CarName, fueltype, carlength, carwidth, carheight, enginesize, horsepower,
peakrpm, citympg, highwaympg, price) %>%
rename(nombre = CarName, tipo_combustible = fueltype, largo = carlength,
ancho = carwidth, alto = carheight, tamanio_motor = enginesize,
poder = horsepower, maxima_rpm = peakrpm, vel_ciudad = citympg,
vel_ruta = highwaympg, precio = price) %>%
mutate(fueltype = as.factor(tipo_combustible))
datos <- datos_crudos %>%
select(CarName, fueltype, carlength, carwidth, carheight, enginesize, horsepower,
peakrpm, citympg, highwaympg, price) %>%
rename(nombre = CarName, tipo_combustible = fueltype, largo = carlength,
ancho = carwidth, alto = carheight, tamanio_motor = enginesize,
poder = horsepower, maxima_rpm = peakrpm, vel_ciudad = citympg,
vel_ruta = highwaympg, precio = price) %>%
mutate(tipo_combustible = as.factor(tipo_combustible))
datos %>%
select(largo, ancho, alto, tamanio_motor, poder, maxima_rpm, vel_ciudad,
vel_ruta, precio) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
arrange <- ggarrange(g1, g2, g3, g4, g5, nrow = 2, ncol = 3)
g <- ggplot(datos, aes(x = precio))
g1 <- g + geom_point(aes(y = largo))
g2 <- g + geom_point(aes(y = ancho))
g3 <- g + geom_point(aes(y = tamanio_motor))
g4 <- g + geom_point(aes(y = vel_ciudad))
g5 <- g + geom_point(aes(y = vel_ruta))
arrange <- ggarrange(g1, g2, g3, g4, g5, nrow = 2, ncol = 3)
annotate_figure(arrange, top = text_grob("Diagramas dispersión de VI con R grande"))
datos %>%
select(largo, ancho, alto, tamanio_motor, poder, maxima_rpm, vel_ciudad,
vel_ruta, precio) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
g1 <- g + geom_point(aes(y = tamanio_motor))
g2 <- g + geom_point(aes(y = maxima_rpm))
annotate_figure(arrange, top = text_grob("Diagramas dispersión de VI con R grande"))
arrange_r_alto <- ggarrange(g1, g2, g3, g4, g5, nrow = 2, ncol = 3)
arrange_r_bajo <- ggarrange(g1, g2, nrow = 2, ncol = 1)
annotate_figure(arrange_r_bajo, top = text_grob("Diagramas dispersión de VI con r chico"))
g1 <- g + geom_point(aes(y = alto))
g2 <- g + geom_point(aes(y = maxima_rpm))
arrange_r_bajo <- ggarrange(g1, g2, nrow = 2, ncol = 1)
annotate_figure(arrange_r_bajo, top = text_grob("Diagramas dispersión de VI con r chico"))
datos %>%
select(largo, ancho, alto, tamanio_motor, poder, maxima_rpm, vel_ciudad,
vel_ruta, precio) %>%
cor(method = "pearson") %>%
ggcorrplot(lab = TRUE)
modelo_sin_seleccionar <- lm(price ~ carlength + carwidth + carheight + horsepower + wheelbase + curbweight +
enginesize + boreratio + stroke + compressionratio + peakrpm + citympg +
highwaympg + fueltype, data = datos)
summary(modelo_sin_seleccionar)
modelo_sin_seleccionar <- lm(precio ~ largo + ancho + alto + tamanio_motor +
poder + maxima_rpm + vel_ciudad + vel_ruta +
tipo_combustilbe, data = datos)
modelo_sin_seleccionar <- lm(precio ~ largo + ancho + alto + tamanio_motor +
poder + maxima_rpm + vel_ciudad + vel_ruta +
tipo_combustible, data = datos)
summary(modelo_sin_seleccionar)
modelo_sin_seleccionar
summary(modelo_sin_seleccionar)
install.packages("sjPlot")
install.packages("sjPlot")
library(sjPlot)
remove.packages("sjPlot", lib="~/R/win-library/4.0")
install.packages("gtsummary")
install.packages("gtsummary")
